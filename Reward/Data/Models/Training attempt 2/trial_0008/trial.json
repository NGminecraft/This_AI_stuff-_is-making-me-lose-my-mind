{"trial_id": "0008", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "LSTM units", "default": null, "conditions": [], "min_value": 10, "max_value": 1000, "step": 10, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "LSTM_act", "default": "softmax", "conditions": [], "values": ["softmax", "softplus", "softsign", "relu", "tanh", "sigmoid", "hard_sigmoid", "linear"], "ordered": false}}, {"class_name": "Int", "config": {"name": "dense_unit_1", "default": null, "conditions": [], "min_value": 10, "max_value": 1000, "step": 5, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "dense_1", "default": "softmax", "conditions": [], "values": ["softmax", "softplus", "softsign", "relu", "tanh", "sigmoid", "hard_sigmoid", "linear"], "ordered": false}}, {"class_name": "Int", "config": {"name": "dense_unit_2", "default": null, "conditions": [], "min_value": 10, "max_value": 1000, "step": 5, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "dense_2", "default": "softmax", "conditions": [], "values": ["softmax", "softplus", "softsign", "relu", "tanh", "sigmoid", "hard_sigmoid", "linear"], "ordered": false}}, {"class_name": "Int", "config": {"name": "dense_unit_3", "default": null, "conditions": [], "min_value": 10, "max_value": 1000, "step": 5, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "dense_3", "default": "softmax", "conditions": [], "values": ["softmax", "softplus", "softsign", "relu", "tanh", "sigmoid", "hard_sigmoid", "linear"], "ordered": false}}, {"class_name": "Int", "config": {"name": "dense_unit_4", "default": null, "conditions": [], "min_value": 10, "max_value": 1000, "step": 5, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "dense_4", "default": "softmax", "conditions": [], "values": ["softmax", "softplus", "softsign", "relu", "tanh", "sigmoid", "hard_sigmoid", "linear"], "ordered": false}}, {"class_name": "Int", "config": {"name": "dense_unit_7", "default": null, "conditions": [], "min_value": 10, "max_value": 1000, "step": 5, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "dense_7", "default": "softmax", "conditions": [], "values": ["softmax", "softplus", "softsign", "relu", "tanh", "sigmoid", "hard_sigmoid", "linear"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "optimizer", "default": "Adadelta", "conditions": [], "values": ["Adadelta", "Adagrad", "Adam", "Adamax", "Ftrl", "Nadam", "RMSprop", "SGD"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "loss", "default": "MeanSquaredError", "conditions": [], "values": ["MeanSquaredError", "MeanAbsoluteError", "MeanAbsolutePercentageError", "Huber", "LogCosh", "BinaryCrossentropy", "CategoricalCrossentropy", "Hinge", "SquaredHinge", "CategoricalHinge", "KLDivergence", "SquaredError"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "learning_rate", "default": 0.1, "conditions": [], "values": [0.1, 0.01, 0.001, 0.0001, 1e-05, 1e-06, 1e-07, 1e-08, 1e-09], "ordered": true}}], "values": {"LSTM units": 180, "LSTM_act": "relu", "dense_unit_1": 805, "dense_1": "hard_sigmoid", "dense_unit_2": 325, "dense_2": "relu", "dense_unit_3": 500, "dense_3": "tanh", "dense_unit_4": 285, "dense_4": "softplus", "dense_unit_7": 395, "dense_7": "hard_sigmoid", "optimizer": "Nadam", "loss": "SquaredError", "learning_rate": 0.001}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"/home/bob/.local/lib/python3.10/site-packages/keras_tuner/src/engine/base_tuner.py\", line 273, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"/home/bob/.local/lib/python3.10/site-packages/keras_tuner/src/engine/base_tuner.py\", line 238, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n  File \"/home/bob/.local/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n  File \"/home/bob/.local/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 233, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n  File \"/home/bob/.local/lib/python3.10/site-packages/keras_tuner/src/engine/hypermodel.py\", line 149, in fit\n    return model.fit(*args, **kwargs)\n  File \"/home/bob/.local/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py\", line 70, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"/tmp/__autograph_generated_fileujjsebmw.py\", line 15, in tf__train_function\n    retval_ = ag__.converted_call(ag__.ld(step_function), (ag__.ld(self), ag__.ld(iterator)), None, fscope)\nValueError: in user code:\n\n    File \"/home/bob/.local/lib/python3.10/site-packages/keras/src/engine/training.py\", line 1401, in train_function  *\n        return step_function(self, iterator)\n    File \"/home/bob/.local/lib/python3.10/site-packages/keras/src/engine/training.py\", line 1384, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/home/bob/.local/lib/python3.10/site-packages/keras/src/engine/training.py\", line 1373, in run_step  **\n        outputs = model.train_step(data)\n    File \"/home/bob/.local/lib/python3.10/site-packages/keras/src/engine/training.py\", line 1151, in train_step\n        loss = self.compute_loss(x, y, y_pred, sample_weight)\n    File \"/home/bob/.local/lib/python3.10/site-packages/keras/src/engine/training.py\", line 1209, in compute_loss\n        return self.compiled_loss(\n    File \"/home/bob/.local/lib/python3.10/site-packages/keras/src/engine/compile_utils.py\", line 252, in __call__\n        self.build(y_pred)\n    File \"/home/bob/.local/lib/python3.10/site-packages/keras/src/engine/compile_utils.py\", line 194, in build\n        self._losses = tf.nest.map_structure(\n    File \"/home/bob/.local/lib/python3.10/site-packages/keras/src/engine/compile_utils.py\", line 365, in _get_loss_object\n        loss = losses_mod.get(loss)\n    File \"/home/bob/.local/lib/python3.10/site-packages/keras/src/losses.py\", line 2965, in get\n        return deserialize(identifier, use_legacy_format=use_legacy_format)\n    File \"/home/bob/.local/lib/python3.10/site-packages/keras/src/losses.py\", line 2912, in deserialize\n        return legacy_serialization.deserialize_keras_object(\n    File \"/home/bob/.local/lib/python3.10/site-packages/keras/src/saving/legacy/serialization.py\", line 537, in deserialize_keras_object\n        raise ValueError(\n\n    ValueError: Unknown loss function: 'SquaredError'. Please ensure you are using a `keras.utils.custom_object_scope` and that this object is included in the scope. See https://www.tensorflow.org/guide/keras/save_and_serialize#registering_the_custom_object for details.\n\n"}